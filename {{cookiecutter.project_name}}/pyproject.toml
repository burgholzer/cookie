[build-system]
{%- if cookiecutter.backend == "maturin" %}
requires = ["maturin>=0.15,<2"]
build-backend = "maturin"
{%- elif cookiecutter.backend == "hatch" %}
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"
{%- elif cookiecutter.backend == "skbuild"  %}
requires = ["pybind11", "scikit-build-core"]
build-backend = "scikit_build_core.build"
{%- endif %}


[project]
name = "{{ cookiecutter.project_name }}"
{%- if cookiecutter.backend == 'maturin' %}
version = "0.1.0"
{%- endif %}
authors = [
  { name = "{{ cookiecutter.full_name }}", email = "{{ cookiecutter.email }}" },
]
{%- if cookiecutter.org | lower == "scikit-hep" %}
maintainers = [
  { name = "The Scikit-HEP admins", email = "scikit-hep-admins@googlegroups.com" },
]
{%- endif %}
description = "{{ cookiecutter.project_short_description }}"
readme = "README.md"
license.file = "LICENSE"
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  {%- if cookiecutter.backend=="hatch" %}
  "Operating System :: OS Independent",
  {%- else %}
  "Operating System :: POSIX :: Linux",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  {%- endif %}
  {%- if cookiecutter.backend=="skbuild" %}
  "Programming Language :: C++",
  {%- elif cookiecutter.backend=="maturin" %}
  "Programming Language :: Rust",
  {%- endif %}
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
  "Typing :: Typed",
]
{%- if cookiecutter.backend in ['skbuild', 'hatch'] %}
dynamic = ["version"]
{%- endif %}
dependencies = []

[project.optional-dependencies]
test = [
  "pytest >=6",
  "pytest-cov >=3",
]
dev = [
  "pytest >=6",
  "pytest-cov >=3",
]
docs = [
  "sphinx>=7.0",
  "myst_parser>=0.13",
  "sphinx_copybutton",
  "sphinx_autodoc_typehints",
  "furo>=2023.08.17",
]

[project.urls]
Homepage = "{{ cookiecutter.url }}"
"Bug Tracker" = "{{ cookiecutter.url }}/issues"
Discussions = "{{ cookiecutter.url }}/discussions"
Changelog = "{{ cookiecutter.url }}/releases"


{%- if cookiecutter.backend == "skbuild" %}


[tool.scikit-build]
minimum-version = "0.4"
build-dir = "build/{wheel_tag}"
metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = ["src/{{ cookiecutter.__project_slug }}/_version.py"]


{%- elif cookiecutter.backend == "maturin" %}


[tool.maturin]
module-name = "{{ cookiecutter.__project_slug }}._core"
python-packages = ["{{ cookiecutter.__project_slug }}"]
python-source = "src"
sdist-generator = "git"  # default is cargo

{%- elif cookiecutter.backend == "hatch" %}


[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/{{ cookiecutter.__project_slug }}/_version.py"

[tool.hatch.envs.default]
features = ["test"]
scripts.test = "pytest {args}"

{%- endif %}

{%- if cookiecutter.backend == "skbuild" %}


[tool.setuptools_scm]
write_to = "src/{{ cookiecutter.__project_slug }}/_version.py"
{%- endif %}


{%- if cookiecutter.__type == "compiled" %}


[tool.cibuildwheel]
test-command = "pytest {project}/tests"
test-extras = ["test"]
{%- endif %}


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]


[tool.coverage]
run.source = ["{{ cookiecutter.__project_slug }}"]
report.exclude_also = [
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.mypy]
files = ["src", "tests"]
python_version = "3.8"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "{{ cookiecutter.__project_slug  }}.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.ruff]
src = ["src"]

[tool.ruff.lint]
extend-select = [
  "B",        # flake8-bugbear
  "I",        # isort
  "ARG",      # flake8-unused-arguments
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "ICN",      # flake8-import-conventions
  "G",        # flake8-logging-format
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  "EXE",      # flake8-executable
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
]
isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["{{ cookiecutter.__project_slug }}._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]


[tool.pylint]
py-version = "3.8"
ignore-paths = [".*/_version.py"]
{%- if cookiecutter.__type == "compiled" %}
extension-pkg-allow-list = ["{{ cookiecutter.__project_slug }}._core"]
{%- endif %}
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "missing-function-docstring",
  "wrong-import-position",
]
