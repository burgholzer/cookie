[build-system]
{%- if cookiecutter.backend == "maturin" %}
requires = ["maturin>=0.15,<2"]
build-backend = "maturin"
{%- elif cookiecutter.backend == "hatch" %}
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"
{%- elif cookiecutter.backend == "skbuild"  %}
requires = ["pybind11>=2.11", "scikit-build-core>=0.6.1"]
build-backend = "scikit_build_core.build"
{%- endif %}


[project]
name = "{{ cookiecutter.__package_name }}"
{%- if cookiecutter.backend in ['maturin'] %}
version = "0.1.0"
{%- endif %}
authors = [
  { name = "{{ cookiecutter.full_name }}", email = "{{ cookiecutter.email }}" },
]
description = "{{ cookiecutter.project_short_description }}"
readme = "README.md"
license.file = "LICENSE"
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  {%- if cookiecutter.backend=="hatch" %}
  "Operating System :: OS Independent",
  {%- else %}
  "Operating System :: POSIX :: Linux",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  {%- endif %}
  {%- if cookiecutter.backend=="skbuild" %}
  "Programming Language :: C++",
  {%- elif cookiecutter.backend=="maturin" %}
  "Programming Language :: Rust",
  {%- endif %}
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
  "Typing :: Typed",
]
{%- if cookiecutter.backend in ['skbuild', 'hatch'] %}
dynamic = ["version"]
{%- endif %}
dependencies = []

[project.optional-dependencies]
test = ["pytest>=7.0"]
coverage = ["{{ cookiecutter.__package_name }}[test]", "pytest-cov>=3.0"]
docs = [
  "sphinx>=7.0",
  "myst_parser>=0.13",
  "sphinx_copybutton",
  "sphinx_autodoc_typehints",
  "sphinxext-opengraph",
  "sphinxcontrib-bibtex>=2.4.2",
  "pybtex>=0.24",
  "ipython",
  "ipykernel",
  "nbsphinx",
  "sphinx_design",
  "furo>=2023.08.17",
]
dev = ["{{ cookiecutter.__package_name }}[coverage, docs]"]

[project.urls]
Homepage = "{{ cookiecutter.url }}"
"Bug Tracker" = "{{ cookiecutter.url }}/issues"
Discussions = "{{ cookiecutter.url }}/discussions"
Changelog = "{{ cookiecutter.url }}/releases"
Documentation = "https://{{ cookiecutter.namespace }}.readthedocs.io/projects/{{ cookiecutter.__project_slug }}"


{%- if cookiecutter.backend == "skbuild" %}


[tool.scikit-build]
# Protect the configuration against future changes in scikit-build-core
minimum-version = "0.6.1"

# Set the target to build
cmake.targets = ["_core"]

# Set required CMake and Ninja versions
cmake.minimum-version = "3.19"
ninja.minimum-version = "1.10"

# Setuptools-style build caching in a local directory
build-dir = "build/{wheel_tag}"

# Build stable ABI wheels for CPython 3.12+
wheel.py-api = "cp312"

# Explicitly set the package directory
wheel.packages = ["src/{{ cookiecutter.namespace }}"]

metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = ["src/{{ cookiecutter.namespace }}/{{ cookiecutter.__project_slug }}/_version.py"]
sdist.exclude = [
  "**/.github",
  "**/doc",
  "**/docs",
  "**/meta",
  "**/plots",
  "**/test",
  "**/tests",
]

[tool.scikit-build.cmake.define]
BUILD_{{ cookiecutter.namespace|upper }}_{{ cookiecutter.__project_slug|upper }}_TESTS = "OFF"
BUILD_{{ cookiecutter.namespace|upper }}_{{ cookiecutter.__project_slug|upper }}_BINDINGS = "ON"
ENABLE_IPO = "ON"


[tool.setuptools_scm]
write_to = "src/{{ cookiecutter.namespace }}/{{ cookiecutter.__project_slug }}/_version.py"


[tool.check-sdist]
sdist-only = ["src/{{ cookiecutter.namespace }}/{{ cookiecutter.__project_slug }}/_version.py"]
git-only = [
  "docs/*",
  "extern/*",
  "test/*",
]

{%- elif cookiecutter.backend == "maturin" %}


[tool.maturin]
module-name = "{{ cookiecutter.__package_name }}._core"
python-packages = ["{{ cookiecutter.namespace }}/{{ cookiecutter.__project_slug }}"]
python-source = "src"
sdist-generator = "git"  # default is cargo

{%- elif cookiecutter.backend == "hatch" %}


[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/{{ cookiecutter.namespace }}/{{ cookiecutter.__project_slug }}/_version.py"

[tool.hatch.build.targets.wheel]
packages = ["src/{{ cookiecutter.namespace }}"]

[tool.hatch.env.default]
features = ["test"]
scripts.test = "pytest {args}"

{%- endif %}


{%- if cookiecutter.__type == "compiled" %}


[tool.cibuildwheel]
build = "cp3*"
skip = "*-musllinux_*"
archs = "auto64"
test-command = "python -c \"from {{ cookiecutter.namespace }} import {{ cookiecutter.__project_slug }}\""
build-frontend = "build"

[tool.cibuildwheel.linux]
environment = { DEPLOY = "ON" }

[tool.cibuildwheel.macos]
environment = { MACOSX_DEPLOYMENT_TARGET = "10.15" }

[tool.cibuildwheel.windows]
before-build = "pip install delvewheel"
repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel}"
{%- endif %}


[tool.pytest.ini_options]
minversion = "7.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
{%- if cookiecutter.__type == "compiled" %}
testpaths = ["test/python"]
{%- else %}
testpaths = ["test"]
{%- endif %}


[tool.coverage]
run.source = ["{{ cookiecutter.__package_name }}"]
run.omit = [
  '*/_compat/*',
]
report.exclude_also = [
  '\.\.\.',
  'if TYPE_CHECKING:',
  'raise AssertionError',
  'raise NotImplementedError',
]

[tool.mypy]
{%- if cookiecutter.__type == "compiled" %}
files = ["src/{{ cookiecutter.namespace }}", "test/python"]
{%- else %}
files = ["src/{{ cookiecutter.namespace }}", "test"]
{%- endif %}
mypy_path = ["$MYPY_CONFIG_FILE_DIR/src"]
python_version = "3.8"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
explicit_package_bases = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "{{ cookiecutter.__package_name  }}.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.ruff]
line-length = 120
extend-include = ["*.ipynb"]
src = ["src"]
preview = true
unsafe-fixes = true

[tool.ruff.lint]
extend-select = [
  "A",           # flake8-builtins
  "ANN",         # flake8-annotations
  "ARG",         # flake8-unused-arguments
  "ASYNC",       # flake8-async
  "B",  "B904",  # flake8-bugbear
  "C4",          # flake8-comprehensions
  "D",           # pydocstyle
  "EM",          # flake8-errmsg
  "EXE",         # flake8-executable
  "FA",          # flake8-future-annotations
  "FLY",         # flynt
  "FURB",        # refurb
  "I",           # isort
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "LOG",         # flake8-logging-format
  "N",           # flake8-naming
  "NPY",         # numpy
  "PERF",        # perflint
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "PYI",         # flake8-pyi
  "Q",           # flake8-quotes
  "RET",         # flake8-return
  "RSE",         # flake8-raise
  "RUF",         # Ruff-specific
  "S",           # flake8-bandit
  "SLF",         # flake8-self
  "SLOT",        # flake8-slots
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "TCH",         # flake8-type-checking
  "TID",         # flake8-tidy-imports
  "TRY",         # tryceratops
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
]
ignore = [
  "ANN101",  # Missing type annotation for `self` in method
  "ANN102",  # Missing type annotation for `cls` in classmethod
  "ISC001",  # Conflicts with formatter
  "PLR09",   # Too many <...>
  "PLR2004", # Magic value used in comparison
  "PLC0415", # Import should be at top of file
  "PT004",   # Incorrect, just usefixtures instead.
  "S101",    # Use of assert detected
]
# Uncomment if using a _compat.typing backport
# typing-modules = ["{{ cookiecutter.__package_name }}._compat.typing"]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.Callable".msg = "Use collections.abc.Callable instead."
"typing.Iterator".msg = "Use collections.abc.Iterator instead."
"typing.Mapping".msg = "Use collections.abc.Mapping instead."
"typing.Sequence".msg = "Use collections.abc.Sequence instead."
"typing.Set".msg = "Use collections.abc.Set instead."
"typing.Self".msg = "Use scikit_build_core._compat.typing.Self instead."
"typing_extensions.Self".msg = "Use scikit_build_core._compat.typing.Self instead."
"typing.assert_never".msg = "Use scikit_build_core._compat.typing.assert_never instead."
"importlib.resources".msg = "Use scikit_build_core._compat.importlib.resources instead."
"importlib_resources".msg = "Use scikit_build_core._compat.importlib.resources instead."

[tool.ruff.lint.per-file-ignores]
"test/**" = ["T20", "ANN"]
"docs/**" = ["T20"]
"noxfile.py" = ["T20", "TID251"]
"*.pyi" = ["D"]  # pydocstyle
"*.ipynb" = [
  "D",    # pydocstyle
  "E402", # Allow imports to appear anywhere in Jupyter notebooks
  "I002", # Allow missing `from __future__ import annotations` import
]
#"src/{{ cookiecutter.namespace }}/{{ cookiecutter.__project_slug }}/_compat/**.py" = ["TID251"]

[tool.ruff.lint.pydocstyle]
convention = "google"
